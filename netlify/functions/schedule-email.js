const nodemailer = require('nodemailer');
const schedule = require('node-schedule'); // Pour la planification des emails
const transporter = nodemailer.createTransport({
    service: 'gmail',
    auth: {
        user: 'kaboreabwa2020@gmail.com',
        pass: 'swbo vejr klic otpu', // Utilisation de variable d'environnement pour s√©curiser le mot de passe
    }
});

exports.handler = async (event, context) => {
    // G√©rer les requ√™tes pr√©flight CORS (OPTIONS)
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 204,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
            },
            body: '',
        };
    }

    // V√©rifier que la requ√™te est bien un POST
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            body: JSON.stringify({ message: 'M√©thode non autoris√©e' })
        };
    }

    // R√©cup√©rer les donn√©es envoy√©es par le frontend
    try {
        const { purchaseDetails, delay } = JSON.parse(event.body);

        console.log("Donn√©es re√ßues :", purchaseDetails, "D√©lai re√ßu :", delay);

        // V√©rification des entr√©es
        if (!purchaseDetails || !purchaseDetails.email || !purchaseDetails.username) {
            return {
                statusCode: 400,
                body: JSON.stringify({ success: false, message: "Informations manquantes" })
            };
        }

        if (typeof delay !== 'number' || delay < 0) {
            return {
                statusCode: 400,
                body: JSON.stringify({ success: false, message: "D√©lai invalide" })
            };
        }

        const mailOptionsClient = {
            from: process.env.EMAIL_USER,
            to: purchaseDetails.email,
            subject: '‚úÖ Merci pour votre achat sur FarmsConnect !',
            text: `üëã Bonjour ${purchaseDetails.username},

Nous vous remercions chaleureusement pour votre achat sur *FarmsConnect*. Votre satisfaction est notre priorit√© absolue.

Afin de mieux r√©pondre √† vos besoins et d'am√©liorer continuellement nos services, nous serions ravis d'avoir votre retour via ce court formulaire de feedback :

üîó [Partagez votre avis ici !](https://ee.kobotoolbox.org/x/uhCnWFCN)

Chaque commentaire compte pour nous et contribue √† vous offrir une exp√©rience encore plus optimale.

Merci de nous faire confiance pour vos achats.
Nous restons √† votre disposition pour toute question ou assistance.

√Ä tr√®s bient√¥t !

üìß Pour toute question, [contactez-nous directement ici](https://wa.me/+22656663638).

Cordialement,  
L'√©quipe FarmsConnect`
        };

        // Planifier l'envoi de l'email apr√®s le d√©lai sp√©cifi√©
        console.log(`Email planifi√© pour ${purchaseDetails.email} dans ${delay} minutes.`);
        
        setTimeout(async () => {
            try {
                await transporter.sendMail(mailOptionsClient);
                console.log('‚úÖ Email envoy√© avec succ√®s au client !');
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'envoi de l\'email :', error);
            }
        }, delay * 60000); // Conversion minutes ‚Üí millisecondes

        return {
            statusCode: 200,
            body: JSON.stringify({
                success: true,
                message: `Email planifi√© pour ${purchaseDetails.email} dans ${delay} minutes.`
            })
        };

    } catch (error) {
        console.error('‚ùå Erreur lors du traitement de la requ√™te :', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ success: false, message: "Erreur interne du serveur" })
        };
    }
};